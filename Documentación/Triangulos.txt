#Permite la detección
#de triángulos mediante el procesamiento de contornos y áreas
#de un dataset de 105 figuras geométricas básicas 
#el cual fue elaborado por los integrantes del grupo


#Josselyn, Martin, Michael, Juan Carlos, Luis

#impoertamos las diferentes librerias
import cv2
import numpy as np
import csv


def get_all_contours(img): 
    #Transformamos a escala de grises
    ref_gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY) 
    #Aplicamos el umbral
    ret, thresh = cv2.threshold(ref_gray, 127, 255, 0)
    #Encontramos contornos en una imagen binaria
    im2, contours, hierarchy = cv2.findContours(thresh.copy(), cv2.RETR_LIST, cv2.CHAIN_APPROX_SIMPLE )
    return contours
#Abrimos el Dataset
with open('../data/nombres.csv', newline='') as File:  
    #Leemos el achivo csv
    reader= csv.reader(File)
    for row in reader:
        #leemos las imagenes del dataset
        #imagen = cv2.imread("../dataset/m17.png") 
        imagen = cv2.imread("../dataset/"+row[0]) 
        
        #Calculamos el área del contorno
        contours = get_all_contours(imagen) 
        areas = [cv2.contourArea(c) for c in contours]
        i = 0
        for extension in areas:
            if extension > 600:
                actual = contours[i]
                #Se aproxima la curva poligonal y se describe la forma
                approx = cv2.approxPolyDP(actual,0.05*cv2.arcLength(actual,True),True)
                if len(approx)==3:
                    #Se procede a dibujar los contornos
                    cv2.drawContours(imagen,[actual],0,(0,0,255),2)
                i = i+1
                
        #Se procede guardando la imagen en un archivo específico
        cv2.imwrite("../salidaTriangulos/"+row[0]+".jpg",imagen)
